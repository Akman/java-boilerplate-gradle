/**
 * The MIT License (MIT)
 *
 * Copyright (C) 2019 Alexander Kapitman <akman.ru@gmail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

import java.util.regex.Matcher;

plugins {

    id 'application'

    // https://docs.gradle.com/build-scan-plugin
    id 'com.gradle.build-scan' version '2.3'

    // https://github.com/openjfx/javafx-gradle-plugin
    id 'org.openjfx.javafxplugin' version '0.0.7'

    // https://github.com/java9-modularity/gradle-modules-plugin
    // id 'org.javamodularity.moduleplugin' version '1.5.0'

    // https://badass-jlink-plugin.beryx.org
    id 'org.beryx.jlink' version '2.10.4'

    // https://github.com/hierynomus/license-gradle-plugin
    id 'com.github.hierynomus.license' version '0.15.0'

    // https://github.com/ben-manes/gradle-versions-plugin
    id 'com.github.ben-manes.versions' version '0.21.0'

    // https://spotbugs.github.io
    id 'com.github.spotbugs' version '2.0.0'

    // https://github.com/researchgate/gradle-release
    id 'net.researchgate.release' version '2.6.0'
    
    // https://docs.gradle.org/current/userguide/checkstyle_plugin.html
    id 'checkstyle'

    // https://docs.gradle.org/current/userguide/pmd_plugin.html
    id 'pmd'

    // https://docs.gradle.org/current/userguide/jacoco_plugin.html
    id 'jacoco'

    // id 'idea'
    // id 'eclipse'

}

repositories {
    mavenCentral()
    jcenter()
}

ext {
    applicationVersion = version.replaceAll('-SNAPSHOT', '')
    javaVersion = JavaVersion.current()
    javaFXVersion = '11.0.2'
    os = org.gradle.internal.os.OperatingSystem.current()
    platform = os.isWindows() ? 'win' : (os.isLinux() ? 'linux' : 'mac')
    platformNativePrefix = os.getNativePrefix()
    defaultEncoding = 'UTF-8'
    logDir = file("${projectDir}/log")
    mainClass = 'ru.akman.launcher.Launcher'
    jpackageOutputDir = 'jpackage'
    jpackageImageOutputDir = file("${buildDir}/${jpackageOutputDir}")
    jpackageImageName = 'Launcher'
    jpackageInstallerOutputDir = file("${buildDir}/${jpackageOutputDir}")
    jpackageInstallerName = 'Launcher'
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

// https://docs.gradle.org/current/userguide/java_library_plugin.html#sec:java_library_configurations_graph
dependencies {
    implementation(
        'org.apache.logging.log4j:log4j-api:2.11.2',
        'org.apache.logging.log4j:log4j-core:2.11.2',
    )
    testImplementation(
        'org.junit.jupiter:junit-jupiter-api:5.4.2',
        'org.junit.jupiter:junit-jupiter-params:5.4.2',
        'org.mockito:mockito-junit-jupiter:2.28.2',
    )
    testRuntimeOnly(
        'org.junit.jupiter:junit-jupiter-engine:5.4.2',
    )
}

// [compileJava, compileTestJava]*.options*.encoding = defaultEncoding
[compileJava, compileTestJava].each {
    it.options.encoding = defaultEncoding
    it.options.compilerArgs += [
        // Give more detail for unchecked conversion warnings that are mandated
        // by the Java Language Specification.
        '-Xlint:unchecked',

        // Show a description of each use or override of a deprecated member
        // or class. Without this, javac shows a summary of the source files
        // that use or override deprecated members or classes.
        '-Xlint:deprecation',

        // Terminate compilation if warnings occur.
        '-Werror',
    ]
}

application {
    applicationName = "launcher"
    mainClassName = "${moduleName}/${mainClass}"
    applicationDefaultJvmArgs = [
        "-Dfile.encoding=${defaultEncoding}".toString(),
    ]
}

javafx {
    version = "${javaFXVersion}"
    modules = [
        'javafx.controls',
        'javafx.fxml',
    ]
}

buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}

clean {
    delete "${logDir}"
}

license {
    header file("${projectDir}/config/license/LICENSE")
    skipExistingHeaders true
    ignoreFailures true
    strictCheck false
    mapping([
        'fxml': 'XML_STYLE',
    ])
    excludes([
        '**/*.properties',
        '**/*.png',
    ])
    ext {
        year = Calendar.getInstance().get(Calendar.YEAR)
        name = 'Alexander Kapitman'
        email = 'akman.ru@gmail.com'
    }
}

apply from: 'gradle/filteredResources.gradle'

// processResourcesFiltered {
//     include 'filtered/'
//     filters = [
//       'filters/filter.properties'
//     ]
// }

processResources {
    exclude 'filtered/', 'filters/'
}

// processTestResourcesFiltered {
//     include 'filtered/'
//     filters = [
//       'filters/filter.properties'
//     ]
// }

processTestResources {
    exclude 'filtered/', 'filters/'
}

test {
    useJUnitPlatform()
    testLogging {
        exceptionFormat 'short'
        events(
            //'started',
            'passed',
            'skipped',
            'failed',
            'standardOut',
            'standardError'
        )
        debug {
            exceptionFormat 'full'
            events(
                'started',
                'passed',
                'skipped',
                'failed',
                'standardOut',
                'standardError'
            )
        }
    }
}

checkstyle {
    // The version of the code quality tool to be used.
    toolVersion = '8.21'

    // The Checkstyle configuration file to use.
    // https://github.com/checkstyle/checkstyle/tree/master/src/main/resources
    configFile = file("${projectDir}/config/checkstyle/google_checks.xml")

    // Whether to allow the build to continue if there are warnings.
    ignoreFailures = true

    // The maximum number of errors that are tolerated before breaking
    // the build or setting the failure property. 
    // maxErrors = 20

    // The maximum number of warnings that are tolerated before breaking
    // the build or setting the failure property.
    // maxWarnings = 50

    // Whether rule violations are to be displayed on the console.
    showViolations = true

    // The directory where reports will be generated.
    // reportsDir = file("${project.reporting.baseDir}/checkstyle")
}

pmd {
    // The version of the code quality tool to be used.
    toolVersion = '6.15.0'

    // Whether or not to write PMD results to System.out.
    consoleOutput = false

    // Whether to allow the build to continue if there are warnings.
    ignoreFailures = true

    // The directory where reports will be generated.
    // reportsDir = file("${project.reporting.baseDir}/pmd")

    // The rule priority threshold; violations for rules with a lower priority
    // will not be reported.
    // rulePriority = 5 // all violations will be reported

    // The target jdk to use with pmd.
    // targetJdk = sourceCompatibility

    // The custom rule set files to be used.
    // If you want to only use custom rule sets, you must clear ruleSets.
    // ruleSetFiles = files("${projectDir}/config/pmd/ruleset.xml")

    // The built-in rule sets to be used.
    // See the official list of built-in rule sets:
    // https://pmd.github.io/pmd-6.8.0/pmd_rules_java.html
    ruleSets = [
        'category/java/errorprone.xml',
        'category/java/bestpractices.xml'
    ]
}

spotbugs {
    // The version of the code quality tool to be used.
    toolVersion = '4.0.0-beta2'

    // The source sets to be analyzed as part of the check and build tasks.
    // sourceSets = [
    //     sourceSets.main,
    // ]

    // Whether or not to allow the build to continue if there are warnings.
    ignoreFailures = true

    // The directory where reports will be generated.
    reportsDir = file("${project.reporting.baseDir}/spotbugs")

    // The analysis effort level. The value specified should be one of
    // min, default, or max. Higher levels increase precision and find more
    // bugs at the expense of running time and memory consumption.
    effort = 'max'

    // The priority threshold for reporting bugs. If set to low, all bugs
    // are reported. If set to medium (the default), medium and high priority
    // bugs are reported. If set to high, only high priority bugs are reported.
    reportLevel = 'medium'

    // The bug detectors which should be run. The bug detectors are specified
    // by their class names, without any package qualification. By default, all
    // detectors which are not disabled by default are run.
    // visitors = [
    //     'FindSqlInjection',
    //     'SwitchFallthrough',
    // ]

    // Similar to visitors except that it specifies bug detectors which should
    // not be run. By default, no visitors are omitted.
    // omitVisitors = [
    //     'FindNonShortCircuit',
    // ]

    // The filename of a filter specifying which bugs are reported.
    // includeFilter = file("${projectDir}/config/spotbugs/includeFilter.xml")

    // The filename of a filter specifying bugs to exclude from being reported.
    // excludeFilter = file("${projectDir}/config/spotbugs/excludeFilter.xml")
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
   reports {
       xml.enabled true
       xml.withMessages true
       html.enabled false
   }
}

jacoco {
    // Version of Jacoco JARs to use.
    toolVersion = '0.8.4'

    // The directory where reports will be generated.
    // reportsDir = file("${project.reporting.baseDir}/jacoco")
}

jacocoTestReport {
    reports {
        xml.enabled true
        xml.destination file("${project.reporting.baseDir}/jacoco/report.xml")
        csv.enabled false
        html.destination file("${project.reporting.baseDir}/jacoco/html")
    }
}

task srcJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

// task docJar(type: Jar, dependsOn: classes) {
//     classifier "javadoc"
//     from javadoc
// }

artifacts {
    archives srcJar // , docJar
}

//
// TODO: Task :javadoc FAILED
//
// Error: module not found: org.apache.logging.log4j
// .../src/main/java/module-info.java:27
// requires org.apache.logging.log4j;
//
// Error: package org.apache.logging.log4j is not visible
// .../src/main/java/ru/akman/cli/App.java:32
// import org.apache.logging.log4j.LogManager;
// package org.apache.logging.log4j is declared in module log4j.api,
// which is not in the module graph
//
// --module-path
//   build/classes/java/main
//   build/resources/main
//   org.apache.logging.log4j/log4j-core/2.11.2/log4j-core-2.11.2.jar
//   org.apache.logging.log4j/log4j-api/2.11.2/log4j-api-2.11.2.jar
//   org.openjfx/javafx-fxml/11.0.2/javafx-fxml-11.0.2-win.jar
//   org.openjfx/javafx-controls/11.0.2/javafx-controls-11.0.2-win.jar
//   org.openjfx/javafx-controls/11.0.2/javafx-controls-11.0.2.jar
//   org.openjfx/javafx-graphics/11.0.2/javafx-graphics-11.0.2-win.jar
//   org.openjfx/javafx-graphics/11.0.2/javafx-graphics-11.0.2.jar
//   org.openjfx/javafx-base/11.0.2/javafx-base-11.0.2-win.jar
//   org.openjfx/javafx-base/11.0.2/javafx-base-11.0.2.jar
// -d build/docs/javadoc
// -doctitle 'java-boilerplate-gradle 1.0.1 API'
// -html5
// -quiet
// -windowtitle 'java-boilerplate-gradle 1.0.1 API'
// src/main/java/module-info.java
// src/main/java/ru/akman/cli/App.java
// src/main/java/ru/akman/commons/Utils.java
// src/main/java/ru/akman/gui/App.java
// src/main/java/ru/akman/gui/PrimaryController.java
// src/main/java/ru/akman/gui/SecondaryController.java
// src/main/java/ru/akman/launcher/Launcher.java
//
// javadoc {
//     exclude '**/module-info.java'
//     options.addBooleanOption 'html5', true
// }

jar {
    manifest {
        attributes(
            'Implementation-Title': "${applicationName}",
            'Main-Class': "${mainClass}"
        )
    }
}

//
// TODO: Task :run FAILED
//
// Illegal option order in command line
//
// java [-options] -jar jarfile [args...]
//
// *** doFirst { commandLine } ***
//
// D:\Programs\Java\jdk-11.0.2\bin\java.exe
// -Dfile.encoding=UTF-8                          >>> +
// -Duser.country=RU                              >>> +
// -Duser.language=ru                             >>> +
// -Duser.variant                                 >>> +
// -cp                                                |
// F:\Workspace\java\java-boilerplate-grad ...        |
// null                                               |    <<<<<<< +---- ???
// --no-gui                                           |
//                                                    |
// *** doLast { commandLine } ***                     |
//                                                    |
// D:\Programs\Java\jdk-11.0.2\bin\java.exe           |
//                           <<<<<<< +----------------+
// --add-modules                                      |
// javafx.controls,javafx.fxml                        |
// --module-path                                      |
// F:\Workspace\java\console-gradle\buil ...          |
// --patch-module                                     |
// ru.akman.launcher=F:\Workspace\java\co ...         |
// --module                                           |
// ru.akman.launcher/ru.akman.launcher.Launcher       |
// -Dfile.encoding=UTF-8                          >>> +
// -Duser.country=RU                              >>> +
// -Duser.language=ru                             >>> +
// -Duser.variant                                 >>> +
// ru.akman.launcher/ru.akman.launcher.Launcher            <<<<<<< +---- ??? 
// --no-gui                                                <<<<<<< +---- !!!
//
run {
    // doFirst {
    //     println '*** doFirst ***'
    //     println '==============='
    //     commandLine.each { println it }
    //     println '==============='
    // }
    // doLast {
    //     println '*** doLast ***'
    //     println '==============='
    //     commandLine.each { println it }
    //     println '==============='
    // }
    standardInput = System.in
    args = [
        '--no-gui'
    ]
}

jlink {

    // The directory into which the custom runtime image should be generated.
    // If you use the targetPlatform method to generate images for
    // other platforms, the corresponding images will be created in
    // subdirectories of imageDir.
    imageDir = file("${buildDir}/jlinkimage")
    
    // The file into which a zip archive of the custom runtime image
    // should be created.
    imageZip = file("${buildDir}/${applicationName}-jlinkimage-${applicationVersion}.zip")

    // Include all dependencies matching the given prefixes into
    // the merged module. This method is useful when it should handle one or
    // more modular jars as non-modular. You can call this method multiple times.
    // https://github.com/beryx/badass-jlink-plugin/issues/14#issuecomment-447351574
    forceMerge('log4j-api')

    launcher {
        name = "${applicationName}"
        args [
        ]
        jvmArgs = [
            "-Dfile.encoding=${defaultEncoding}".toString(),
        ]
        unixScriptTemplate = file("${projectDir}/assets/nix-script.template")
        windowsScriptTemplate = file("${projectDir}/assets/win-script.template")
    }

    // Options for creating the runtime image
    options = [
        // Specifies the byte order of the generated image: "little" or "big".
        // The default value is the format of your system's architecture.
        // '--endian', 'little',

        // Suppresses a fatal error when signed modular JARs are linked in
        // the runtime image. The signature-related files of the signed modular
        // JARs aren’t copied to the runtime image.
        // '--ignore-signing-information',

        // Excludes native commands from the image
        // '--strip-native-commands',

        // Strips debug information from the output image
        '--strip-debug',

        // Excludes header files
        '--no-header-files',

        // Excludes man pages
        '--no-man-pages',

        // Enable compression of resources: "0" - no compression,
        // "1" - constant string sharing, "2" - zip
        '--compress', '2',
    ]

    // Configure the module descriptor of the merged module.
    // It provides a DSL that matches the syntax of the directives in
    // a module declaration file (module-info.java), but it requires quotes
    // around the names of modules, services, and service implementation classes.
    // DSL does not support exports directives because automatically exports
    // all packages found in the merged module.
    // mergedModule {
    //
    //     additive = true
    //
    //     requires 'java.desktop'
    //     requires transitive 'java.sql'
    //     uses 'java.sql.Driver'
    //     provides 'java.sql.Driver' with 'org.hsqldb.jdbc.JDBCDriver'
    // }

    // targetPlatform('linux-s390x') {
    //     jdkHome = '/usr/lib/jvm/linux-s390x/jdk-11.0.2+9'
    //     addOptions('--endian', 'big')
    //     addExtraModulePath('/usr/lib/openjfx/linux-s390x/jmods')
    // }
    // targetPlatform('mac') {
    //     jdkHome = '/usr/lib/jvm/mac/jdk-11.0.2+9'
    //     addExtraModulePath('/usr/lib/openjfx/mac/jmods')
    // }
    // targetPlatform('win') {
    //     jdkHome = '/usr/lib/jvm/win/jdk-11.0.2+9'
    //     addExtraModulePath('/usr/lib/openjfx/win/jmods')
    // }

    // Create a platform-specific application image and installer
    // Set the environment variable BADASS_JLINK_JPACKAGE_HOME to JDK home
    // directory with jpackage tool.
    jpackage {

        skipInstaller = true

        // Convenience property for setting both imageOutputDir and
        // installerOutputDir with the value "${buildDir}/${outputDir}".
        outputDir = jpackageOutputDir
        
        // The directory passed as argument to the --output option when running
        // jpackage in the create-app-image mode.
        imageOutputDir = jpackageImageOutputDir
        
        // The directory passed as argument to the --output option when running
        // jpackage in the create-installer-image mode.
        installerOutputDir = jpackageInstallerOutputDir

        // https://jdk.java.net/jpackage/
        // https://download.java.net/java/early_access/jpackage/49/openjdk-13-jpackage+49_windows-x64_bin.zip
        // Known issues:
        // JDK-8215447: Investigate if current implementation of --license-file is correct for RPM packages
        // JDK-8220806: invalid --app-version causes failure in windows exe installer
        // JDK-8204991: Cannot start application (WinLauncher) if path contains non-ascii character

        // https://openjdk.java.net/jeps/343

        // The argument passed to the --name option when running jpackage
        // in the create-app-image mode.
        imageName = jpackageImageName

        // List of additional options to be passed to the jpackage executable
        // in the create-app-image mode.
        imageOptions = [
            // Version of the application
            '--app-version', "${version}",

            // Description of the application
            '--description', 'Launcher Application',

            // Vendor of the application
            '--vendor', 'Akman',

            // Copyright for the application
            '--copyright', 'Copyright (C) 2019 A.Kapitman',
        ]

        // The argument passed to the --name option when running jpackage
        // in the create-installer mode.
        installerName = jpackageInstallerName

        // Options for creating the application installer
        installerOptions = [

            // Version of the application
            '--app-version', "${applicationVersion}",

            // Description of the application
            '--description', 'Launcher Installer',

            // Vendor of the application
            '--vendor', 'Akman',

            // Copyright for the application
            '--copyright', 'Copyright (C) 2019 A.Kapitman',

            // An identifier that uniquely identifies the application.
            // Defaults to the main class name.
            // The value should be a valid DNS name.
            '--identifier', 'ru.akman.launcher',

            // Path to the license file (absolute path or relative to the
            // current directory)
            '--license-file', 'LICENSE',

            // Path to override jpackage resources. Icons, template files,
            // and other resources of jpackage can be over-ridden by adding
            // replacement resources to this directory. (absolute path or
            // relative to the current directory)
            // '--resource-dir <path>',
        ]
        switch (platform) {
            case 'mac':
                imageOptions += [
                    // Path of the icon of the application bundle (absolute path
                    // or relative to the current directory)
                    '--icon', "${projectDir}/assets/mac/launcher.icns",

                    // Name of the application as it appears in the Menu Bar.
                    // This can be different from the application name.
                    // This name must be less than 16 characters long and
                    // be suitable for displaying in the menu bar and the
                    // application Info window. Defaults to the application name.
                    '--mac-bundle-name', 'Launcher',

                    // An identifier that uniquely identifies the application
                    // for MacOSX. Defaults to the value of --identifier option.
                    // May only use alphanumeric (A-Z,a-z,0-9), hyphen (-), and
                    // period (.) characters.
                    '--mac-bundle-identifier', 'ru.akman.launcher',

                    // Request that the bundle be signed
                    // '--mac-sign',

                    // Path of the keychain to use (absolute path or relative
                    // to the current directory). If not specified, the standard
                    // keychains are used.
                    // '--mac-signing-keychain <file path>',

                    // User name portion of the typical signing key
                    // '--mac-signing-key-user-name <user name>',

                    // When signing the application bundle, this value is
                    // prefixed to all components that need to be signed that
                    // don't have an existing bundle identifier.
                    // '--mac-bundle-signing-prefix <prefix string>',
                ]
                installerOptions += [
                    // Path to a Properties file that contains list of
                    // key, value pairs (absolute path or relative to the
                    // current directory). The keys: "extension", "mime-type",
                    // "icon", and "description" can be used to describe the
                    // association. This option can be used multiple times.
                    '--file-associations', "${projectDir}/assets/mac/associations.properties",

                    // Absolute path of the installation directory of the
                    // application on OS X or Linux. Relative sub-path of the
                    // installation location of the application such as
                    // "Program Files" or "AppData" on Windows.
                    // '--install-dir <file path>',
                ]
                // The type of the installer to create. Valid values are: "exe",
                // "msi", "rpm", "deb", "pkg", "dmg". If this option is not
                // specified (in create-installer mode) all supported types of
                // installable packages for the current platform will be created.
                // installerType = 'pkg'
                // installerType = 'dmg'
                break
            case 'win':
                imageOptions += [
                    // Path of the icon of the application bundle (absolute path
                    // or relative to the current directory)
                    '--icon', "${projectDir}/assets/windows/launcher.ico",

                    // Creates a console launcher for the application, should be
                    // specified for application which requires to show console
                    // at start.
                    // '--win-console',
                ]
                installerOptions += [
                    // Path to a Properties file that contains list of
                    // key, value pairs (absolute path or relative to the
                    // current directory). The keys: "extension", "mime-type",
                    // "icon", and "description" can be used to describe the
                    // association. This option can be used multiple times.
                    '--file-associations', "${projectDir}/assets/windows/associations.properties",

                    // Absolute path of the installation directory of the
                    // application on OS X or Linux. Relative sub-path of the
                    // installation location of the application such as
                    // "Program Files" or "AppData" on Windows.
                    '--install-dir', 'Launcher',

                    // Adds a dialog to enable the user to choose a directory
                    // in which the product is installed
                    '--win-dir-chooser',

                    // Adds the application to the system menu
                    '--win-menu',

                    // Start Menu group this application is placed in.
                    // Wix fails when it uses Parent/Child menu group.
                    '--win-menu-group', 'Launcher',

                    // Request to perform an install on a per-user basis
                    '--win-per-user-install',

                    // Name of the application for registry references.
                    // The default is the Application Name with only
                    // alphanumerics, dots, and dashes (no whitespace)
                    '--win-registry-name', 'Launcher',

                    // Creates a desktop shortcut for the application
                    '--win-shortcut',

                    // UUID associated with upgrades for this package
                    '--win-upgrade-uuid', '8C5094E6-C97E-47D8-8465-1DF16124700F',
                ]
                // The type of the installer to create. Valid values are: "exe",
                // "msi", "rpm", "deb", "pkg", "dmg". If this option is not
                // specified (in create-installer mode) all supported types of
                // installable packages for the current platform will be created.
                // installerType = 'exe' // Inno Setup 5.6.1
                // installerType = 'msi' // WiX Toolset 3.11
                break
            case 'linux':
                imageOptions += [
                    // Path of the icon of the application bundle (absolute path
                    // or relative to the current directory)
                    '--icon', "${projectDir}/assets/linux/launcher.png",
                ]
                installerOptions += [
                    // Path to a Properties file that contains list of
                    // key, value pairs (absolute path or relative to the
                    // current directory). The keys: "extension", "mime-type",
                    // "icon", and "description" can be used to describe the
                    // association. This option can be used multiple times.
                    '--file-associations', "${projectDir}/assets/linux/associations.properties",

                    // Absolute path of the installation directory of the
                    // application on OS X or Linux. Relative sub-path of the
                    // installation location of the application such as
                    // "Program Files" or "AppData" on Windows.
                    // '--install-dir <file path>',

                    // Name for Linux bundle, defaults to the application name.
                    // Valid Debian package name must consist only of
                    // LOWER CASE LETTERS (a-z), digits (0-9), plus (+) and
                    // minus (-) signs, and periods (.). They must be at least
                    // two characters long and must start with an alphanumeric
                    // character.
                    '--linux-bundle-name', 'ru.akman.launcher',

                    // Maintainer for .deb bundle
                    '--linux-deb-maintainer', 'Alexander Kapitman <akman.ru@gmail.com>',

                    // Menu group this application is placed in
                    '--linux-menu-group', 'Akman',

                    // Required packages or capabilities for the application
                    // '--linux-package-deps',

                    // Type of the license ("License: " of the RPM .spec)
                    '--linux-rpm-license-type', 'MIT',
                ]
                // The type of the installer to create. Valid values are: "exe",
                // "msi", "rpm", "deb", "pkg", "dmg". If this option is not
                // specified (in create-installer mode) all supported types of
                // installable packages for the current platform will be created.
                // installerType = 'deb' // fakeroot
                // installerType = 'rpm' // rpm
                break
        }
    }

}

task jpackageZip(type: Zip, dependsOn: jpackage) {
    description = 'Creates a zip of the platform-specific runtime image'
    jpackageInstallerOutputDir.eachDir() {
      metadataCharset = defaultEncoding
      destinationDirectory = jpackageInstallerOutputDir
      archiveFileName = "${jpackageInstallerName}-${applicationVersion}-${platformNativePrefix}.zip"
      from it
      into "${jpackageInstallerName}-${applicationVersion}"
    }
}

release {

    // Fail when there un-committed changes.
    failOnCommitNeeded = true

    // Fail when there are local commits that haven't been published upstream.
    failOnPublishNeeded = true

    // Fail when the project has dependencies on SNAPSHOT versions unless
    // those SNAPSHOT dependencies have been defined
    // as 'ignoredSnapshotDependencies' using the syntax '$group:$name'.
    failOnSnapshotDependencies = true

    // Fail when files are found that are not under version control.
    failOnUnversionedFiles = true

    // Fail when the source needs to be updated, or there are changes
    // available upstream that haven't been pulled.
    failOnUpdateNeeded = true

    // Should the plugin revert it's changes to gradle.properties
    // when a failure occurs.
    revertOnFail = true

    // The string template which is used to generate the tag name.
    // Possible variables are $version and $name.
    // Always ensure to use single-quotes, otherwise "$" is interpreted
    // already in your build script.
    tagTemplate = 'v${version}'

    // This will be prepended to all commits done by the plugin.
    // A good place for code review, or ticket numbers.
    preCommitText = ''

    // The commit message used to commit the non-SNAPSHOT version
    // if SNAPSHOT was used.
    preTagCommitMessage = '[Gradle Release Plugin] - pre tag commit: '

    // The commit message used when creating the tag.
    // Not used with BZR projects.
    tagCommitMessage = '[Gradle Release Plugin] - creating tag: '

    // The commit message used when committing the next version.
    newVersionCommitMessage = '[Gradle Release Plugin] - new version commit: '

    // TODO: unknown property 'snapshotSuffix'
    // The version suffix used by the project's version (if used).
    // snapshotSuffix = '-SNAPSHOT'

    versionPropertyFile = 'gradle.properties'

    versionProperties = []

    versionPatterns = [
        /(\d+)\.(\d+)\.(\d+)(.*$)/: { Matcher m, Project p ->
            m.replaceAll("${m[0][1]}${(m[0][2] as int) + 1}${m[0][3]}${m[0][4]}")
        },
    ]

    buildTasks = [
        'build',
        'jpackage',
        'jpackageZip',
    ]

    // TODO: unknown property 'ignoredSnapshotDependencies'
    // ignoredSnapshotDependencies = []

    // TODO: unknown property 'pushReleaseVersionBranch'
    // (GIT only) If set to the name of a branch, the "release" task will
    // commit the release on this branch, and the next version
    // on the working branch.
    // pushReleaseVersionBranch = false

    git {

        // Defines the branch which releases must be done off of.
        // Eg. set to "release" to require releases are done on
        // the "release" branch (or use a regular expression to allow releases
        // from multiple branches, e.g. "/release|master/").
        // Set to '' to ignore.
        requireBranch = 'master'

        pushToBranchPrefix = ''

        pushToRemote = 'origin'

        commitVersionFileOnly = false

        // Adds `-s` parameter to the tag command
        signTag = false

        // Defines an array of options to add to the git adapter during a push.
        // This could be useful to have the vc hooks skipped during a release.
        // pushOptions = [
        //     '--no-verify',
        // ]

    }
}

task releaseUploadAssets(dependsOn: release) {
    description = 'Uploads release assets'
    doLast {
        println "Uploads assets for release: $version"
        jpackageInstallerOutputDir.eachFile() {
            println it
        }
    }
}
