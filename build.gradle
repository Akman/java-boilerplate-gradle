/*
 * Java Application Boilerplate Project
 *
 * Copyright (C) 2019 A.Kapitman
 * All right reserved
 */

plugins {

    id 'application'
    // id 'idea'
    // id 'eclipse'

    // https://docs.gradle.com/build-scan-plugin
    id 'com.gradle.build-scan' version '2.3'

    // https://github.com/openjfx/javafx-gradle-plugin
    id 'org.openjfx.javafxplugin' version '0.0.7'

    // https://github.com/java9-modularity/gradle-modules-plugin
    // id 'org.javamodularity.moduleplugin' version '1.5.0'

    // https://badass-jlink-plugin.beryx.org
    id 'org.beryx.jlink' version '2.10.4'

    // https://github.com/hierynomus/license-gradle-plugin
    id 'com.github.hierynomus.license' version '0.15.0'

    // https://github.com/ben-manes/gradle-versions-plugin
    id 'com.github.ben-manes.versions' version '0.21.0'

    // https://spotbugs.github.io
    id 'com.github.spotbugs' version '2.0.0'
    
    // https://docs.gradle.org/current/userguide/checkstyle_plugin.html
    id 'checkstyle'

    // https://docs.gradle.org/current/userguide/pmd_plugin.html
    id 'pmd'

    // https://docs.gradle.org/current/userguide/jacoco_plugin.html
    id 'jacoco'

}

repositories {
    mavenCentral()
    jcenter()
}

version = '1.0.1' +
    (Boolean.valueOf(System.getProperty('snapshot')) ? '-SNAPSHOT' : '')

ext {
    javaVersion = JavaVersion.current()
    javaFXVersion = '11.0.2'
    os = org.gradle.internal.os.OperatingSystem.current()
    platform = os.isWindows() ? 'win' : (os.isLinux() ? 'linux' : 'mac')
    defaultEncoding = 'UTF-8'
    logDir = file("${projectDir}/log")
    mainClass = 'ru.akman.launcher.Launcher'
}

buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

// [compileJava, compileTestJava]*.options*.encoding = defaultEncoding
[compileJava, compileTestJava].each {
    it.options.encoding = defaultEncoding
    it.options.compilerArgs += [
        // Give more detail for unchecked conversion warnings that are mandated
        // by the Java Language Specification.
        '-Xlint:unchecked',
        // Show a description of each use or override of a deprecated member
        // or class. Without this, javac shows a summary of the source files
        // that use or override deprecated members or classes.
        '-Xlint:deprecation',
        // Terminate compilation if warnings occur.
        '-Werror',
    ]
}

application {
    applicationName = "launcher"
    mainClassName = "${moduleName}/${mainClass}"
    applicationDefaultJvmArgs = [
        "-Dfile.encoding=${defaultEncoding}".toString(),
    ]
}

license {
    header file('LICENSE')
    skipExistingHeaders true
    ignoreFailures true
    strictCheck false
    mapping([
        'fxml': 'XML_STYLE',
    ])
    excludes([
        '**/*.properties',
    ])
    ext {
        year = Calendar.getInstance().get(Calendar.YEAR)
        name = 'Alexander Kapitman'
        email = 'akman.ru@gmail.com'
    }
}

// https://docs.gradle.org/current/userguide/java_library_plugin.html#sec:java_library_configurations_graph
dependencies {
    implementation(
        'org.apache.logging.log4j:log4j-api:2.11.2',
        'org.apache.logging.log4j:log4j-core:2.11.2',
    )
    testImplementation(
        'org.junit.jupiter:junit-jupiter-api:5.4.2',
        'org.junit.jupiter:junit-jupiter-params:5.4.2',
        'org.mockito:mockito-junit-jupiter:2.28.2',
    )
    testRuntimeOnly(
        'org.junit.jupiter:junit-jupiter-engine:5.4.2',
    )
}

javafx {
    version = "${javaFXVersion}"
    modules = [
        'javafx.controls',
        'javafx.fxml',
    ]
}

clean {
    delete "${logDir}"
}

apply from: 'gradle/filteredResources.gradle'

// processResourcesFiltered {
//     include 'filtered/'
//     filters = [
//       'filters/filter.properties'
//     ]
// }

processResources {
    exclude 'filtered/', 'filters/'
}

// processTestResourcesFiltered {
//     include 'filtered/'
//     filters = [
//       'filters/filter.properties'
//     ]
// }

processTestResources {
    exclude 'filtered/', 'filters/'
}

test {
    useJUnitPlatform()
    testLogging {
        exceptionFormat 'short'
        events(
            //'started',
            'passed',
            'skipped',
            'failed',
            'standardOut',
            'standardError'
        )
        debug {
            exceptionFormat 'full'
            events(
                'started',
                'passed',
                'skipped',
                'failed',
                'standardOut',
                'standardError'
            )
        }
    }
}

checkstyle {
    // The version of the code quality tool to be used.
    toolVersion = '8.21'

    // The Checkstyle configuration file to use.
    // https://github.com/checkstyle/checkstyle/tree/master/src/main/resources
    configFile = file("${projectDir}/config/checkstyle/google_checks.xml")

    // Whether to allow the build to continue if there are warnings.
    ignoreFailures = true

    // The maximum number of errors that are tolerated before breaking
    // the build or setting the failure property. 
    // maxErrors = 20

    // The maximum number of warnings that are tolerated before breaking
    // the build or setting the failure property.
    // maxWarnings = 50

    // Whether rule violations are to be displayed on the console.
    showViolations = true

    // The directory where reports will be generated.
    // reportsDir = file("${project.reporting.baseDir}/checkstyle")
}

pmd {
    // The version of the code quality tool to be used.
    toolVersion = '6.15.0'

    // Whether or not to write PMD results to System.out.
    consoleOutput = true

    // Whether to allow the build to continue if there are warnings.
    ignoreFailures = true

    // The directory where reports will be generated.
    // reportsDir = file("${project.reporting.baseDir}/pmd")

    // The rule priority threshold; violations for rules with a lower priority
    // will not be reported.
    // rulePriority = 5 // all violations will be reported

    // The target jdk to use with pmd.
    // targetJdk = sourceCompatibility

    // The custom rule set files to be used.
    // If you want to only use custom rule sets, you must clear ruleSets.
    // ruleSetFiles = files("${projectDir}/config/pmd/ruleset.xml")

    // The built-in rule sets to be used.
    // See the official list of built-in rule sets:
    // https://pmd.github.io/pmd-6.8.0/pmd_rules_java.html
    ruleSets = [
        'category/java/errorprone.xml',
        'category/java/bestpractices.xml'
    ]
}

spotbugs {
    // The version of the code quality tool to be used.
    toolVersion = '4.0.0-beta2'

    // The source sets to be analyzed as part of the check and build tasks.
    // sourceSets = [
    //     sourceSets.main,
    // ]

    // Whether or not to allow the build to continue if there are warnings.
    ignoreFailures = true

    // The directory where reports will be generated.
    reportsDir = file("${project.reporting.baseDir}/spotbugs")

    // The analysis effort level. The value specified should be one of
    // min, default, or max. Higher levels increase precision and find more
    // bugs at the expense of running time and memory consumption.
    effort = 'max'

    // The priority threshold for reporting bugs. If set to low, all bugs
    // are reported. If set to medium (the default), medium and high priority
    // bugs are reported. If set to high, only high priority bugs are reported.
    reportLevel = 'medium'

    // The bug detectors which should be run. The bug detectors are specified
    // by their class names, without any package qualification. By default, all
    // detectors which are not disabled by default are run.
    // visitors = [
    //     'FindSqlInjection',
    //     'SwitchFallthrough',
    // ]

    // Similar to visitors except that it specifies bug detectors which should
    // not be run. By default, no visitors are omitted.
    // omitVisitors = [
    //     'FindNonShortCircuit',
    // ]

    // The filename of a filter specifying which bugs are reported.
    // includeFilter = file("${projectDir}/config/spotbugs/includeFilter.xml")

    // The filename of a filter specifying bugs to exclude from being reported.
    // excludeFilter = file("${projectDir}/config/spotbugs/excludeFilter.xml")
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
   reports {
       xml {
           enabled true
           withMessages true
       }
       html {
           enabled false
       }
   }
}

jacoco {
    // Version of Jacoco JARs to use.
    toolVersion = '0.8.4'

    // The directory where reports will be generated.
    // reportsDir = file("${project.reporting.baseDir}/jacoco")
}

jacocoTestReport {
    reports {
        xml.enabled true
        xml.destination file("${project.reporting.baseDir}/jacoco/report.xml")
        csv.enabled false
        html.destination file("${project.reporting.baseDir}/jacoco/html")
    }
}

task srcJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

// task docJar(type: Jar, dependsOn: classes) {
//     classifier "javadoc"
//     from javadoc
// }

artifacts {
    archives srcJar // , docJar
}

//
// TODO: Task :javadoc FAILED
//
// Error: module not found: org.apache.logging.log4j
// .../src/main/java/module-info.java:27
// requires org.apache.logging.log4j;
//
// Error: package org.apache.logging.log4j is not visible
// .../src/main/java/ru/akman/cli/App.java:32
// import org.apache.logging.log4j.LogManager;
// package org.apache.logging.log4j is declared in module log4j.api,
// which is not in the module graph
//
// --module-path
//   build/classes/java/main
//   build/resources/main
//   org.apache.logging.log4j/log4j-core/2.11.2/log4j-core-2.11.2.jar
//   org.apache.logging.log4j/log4j-api/2.11.2/log4j-api-2.11.2.jar
//   org.openjfx/javafx-fxml/11.0.2/javafx-fxml-11.0.2-win.jar
//   org.openjfx/javafx-controls/11.0.2/javafx-controls-11.0.2-win.jar
//   org.openjfx/javafx-controls/11.0.2/javafx-controls-11.0.2.jar
//   org.openjfx/javafx-graphics/11.0.2/javafx-graphics-11.0.2-win.jar
//   org.openjfx/javafx-graphics/11.0.2/javafx-graphics-11.0.2.jar
//   org.openjfx/javafx-base/11.0.2/javafx-base-11.0.2-win.jar
//   org.openjfx/javafx-base/11.0.2/javafx-base-11.0.2.jar
// -d build/docs/javadoc
// -doctitle 'java-boilerplate-gradle 1.0.1 API'
// -html5
// -quiet
// -windowtitle 'java-boilerplate-gradle 1.0.1 API'
// src/main/java/module-info.java
// src/main/java/ru/akman/cli/App.java
// src/main/java/ru/akman/commons/Utils.java
// src/main/java/ru/akman/gui/App.java
// src/main/java/ru/akman/gui/PrimaryController.java
// src/main/java/ru/akman/gui/SecondaryController.java
// src/main/java/ru/akman/launcher/Launcher.java
//
// javadoc {
//     exclude '**/module-info.java'
//     options.addBooleanOption 'html5', true
// }

jar {
    manifest {
        attributes(
            'Implementation-Title': "${applicationName}",
            'Main-Class': "${mainClass}"
        )
    }
}

//
// TODO: Illegal option order in command line
//
// java [-options] -jar jarfile [args...]
//
// *** doFirst { commandLine } ***
//
// D:\Programs\Java\jdk-11.0.2\bin\java.exe
// -Dfile.encoding=UTF-8                          >>> +
// -Duser.country=RU                              >>> +
// -Duser.language=ru                             >>> +
// -Duser.variant                                 >>> +
// -cp                                                |
// F:\Workspace\java\java-boilerplate-grad ...        |
// null                                               |    <<<<<<< +---- ???
// --no-gui                                           |
//                                                    |
// *** doLast { commandLine } ***                     |
//                                                    |
// D:\Programs\Java\jdk-11.0.2\bin\java.exe           |
//                           <<<<<<< +----------------+
// --add-modules                                      |
// javafx.controls,javafx.fxml                        |
// --module-path                                      |
// F:\Workspace\java\console-gradle\buil ...          |
// --patch-module                                     |
// ru.akman.launcher=F:\Workspace\java\co ...         |
// --module                                           |
// ru.akman.launcher/ru.akman.launcher.Launcher       |
// -Dfile.encoding=UTF-8                          >>> +
// -Duser.country=RU                              >>> +
// -Duser.language=ru                             >>> +
// -Duser.variant                                 >>> +
// ru.akman.launcher/ru.akman.launcher.Launcher            <<<<<<< +---- ??? 
// --no-gui                                                <<<<<<< +---- !!!
//
run {
    // doFirst {
    //     println '*** doFirst ***'
    //     println '==============='
    //     commandLine.each { println it }
    //     println '==============='
    // }
    // doLast {
    //     println '*** doLast ***'
    //     println '==============='
    //     commandLine.each { println it }
    //     println '==============='
    // }
    standardInput = System.in
    args = [
        '--no-gui'
    ]
}

jlink {

    // mergedModule {
    // }

    options = [
        '--strip-debug',
        '--compress', '2',
        '--no-header-files',
        '--no-man-pages',
    ]

    launcher {
        name = "${applicationName}"
        jvmArgs = [
            "-Dfile.encoding=${defaultEncoding}".toString(),
        ]
        // unixScriptTemplate = file("${projectDir}/scripts/unixScriptTemplate")
        // windowsScriptTemplate = file("${projectDir}/scripts/windowsScriptTemplate")
    }

    // https://github.com/beryx/badass-jlink-plugin/issues/14#issuecomment-447351574
    forceMerge('log4j-api')


    // Set the environment variable BADASS_JLINK_JPACKAGE_HOME
    // BADASS_JLINK_JPACKAGE_HOME=D:/Programs/Java/jdk-13
    jpackage {

        // https://jdk.java.net/jpackage/
        // https://download.java.net/java/early_access/jpackage/49/openjdk-13-jpackage+49_windows-x64_bin.zip
        // Known issues:
        // JDK-8215447: Investigate if current implementation of --license-file is correct for RPM packages
        // JDK-8220806: invalid --app-version causes failure in windows exe installer
        // JDK-8204991: Cannot start application (WinLauncher) if path contains non-ascii character

        switch (platform) {
            case 'mac':
                installerOptions = [
                    '--mac-sign',
                    //'--mac-signing-key-user-name', System.getenv('SIGNING_KEY_USER_NAME'),
                    //'--mac-signing-keychain', System.getenv('SIGNING_KEYCHAIN_PATH')
                ]
                break
            case 'win':
                imageOptions = [
                    // '--win-console'
                ]
                installerOptions = [
                    '--win-per-user-install',
                    '--win-dir-chooser',
                    // '--win-console',
                    // '--win-menu',
                    // '--win-shortcut'
                ]
                //installerType = 'exe'
                break
            case 'linux':
                break
        }
    }

}

// Platform dependent option for creating the application launcher
/*
--win-console

Creates a console launcher for the application, should be specified for
application which requires console interactions

--mac-bundle-identifier <ID string>

An identifier that uniquely identifies the application for MacOSX.
Defaults to the value of --identifier option.
May only use alphanumeric (A-Z,a-z,0-9), hyphen (-), and period (.) characters.

--mac-bundle-name <name string>

Name of the application as it appears in the Menu Bar. This can be different
from the application name. This name must be less than 16 characters long and
be suitable for displaying in the menu bar and the application Info window.
Defaults to the application name.

--mac-bundle-signing-prefix <prefix string>

When signing the application bundle, this value is prefixed to all components
that need to be signed that don't have an existing bundle identifier.

--mac-sign — Request that the bundle be signed

--mac-signing-keychain <file path>

Path of the keychain to use (absolute path or relative to the current directory).
If not specified, the standard keychains are used.

--mac-signing-key-user-name <user name>

User name portion of the typical "Mac Developer ID Application: " signing key
*/

// Options for creating the application installer(s)

/*
--app-image <file path>

Location of the predefined application image that is used to build
an installable package (absolute path or relative to the current directory).
See create-app-image mode options to create the application image.

--file-associations <file path>

Path to a Properties file that contains list of key, value pairs (absolute path
or relative to the current directory). The keys "extension", "mime-type",
"icon", and "description" can be used to describe the association.
This option can be used multiple times.

--identifier <id string>

An identifier that uniquely identifies the application. Defaults to the main
class name. The value should be a valid DNS name.

--install-dir <file path>

Absolute path of the installation directory of the application on OS X or Linux.
Relative sub-path of the installation location of the application such as
"Program Files" or "AppData" on Windows.

--installer-type <type>

The type of the installer to create.
Valid values are: {"exe", "msi", "rpm", "deb", "pkg", "dmg"}
If this option is not specified (in create-installer mode) all supported types
of installable packages for the current platform will be created.

--license-file <file path>

Path to the license file (absolute path or relative to the current directory)

--resource-dir <path>

Path to override jpackage resources. Icons, template files, and other resources
of jpackage can be over-ridden by adding replacement resources to this directory.
(absolute path or relative to the current directory)

--runtime-image <file-path>

Path of the predefined runtime image to install (absolute path or relative to
the current directory). Option is required when creating a runtime installer.
*/

// Platform dependent options for creating the application installer(s)

/*
--win-dir-chooser

Adds a dialog to enable the user to choose a directory in which the product
is installed

--win-menu — Adds the application to the system menu

--win-menu-group <menu group name>

Start Menu group this application is placed in

--win-per-user-install

Request to perform an install on a per-user basis

--win-registry-name <registry name>

Name of the application for registry references. The default is
the Application Name with only alphanumerics, dots, and dashes (no whitespace)

--win-shortcut

Creates a desktop shortcut for the application

--win-upgrade-uuid <id string>

UUID associated with upgrades for this package

--linux-bundle-name <bundle name>

Name for Linux bundle, defaults to the application name

--linux-deb-maintainer <email address>

Maintainer for .deb bundle

--linux-menu-group <menu-group-name>

Menu group this application is placed in

--linux-package-deps

Required packages or capabilities for the application

--linux-rpm-license-type <type string>

Type of the license ("License: " of the RPM .spec)
*/