#
# https://docs.travis-ci.com/user/tutorial/
#

git:

  # Travis CI can clone repositories to a maximum depth of 50 commits,
  # which is only really useful if you are performing git operations.
  # Please note that if you use a depth of 1 and have a queue of jobs,
  # Travis CI won’t build commits that are in the queue when
  # you push a new commit.
  # You can also remove the --depth flag entirely, add depth: false
  
  depth: false

  # Travis CI clones repositories without the quiet flag (-q) by default.
  # Enabling the quiet flag can be useful if you’re trying to avoid
  # log file size limits or even if you just don’t need to include it.
  
  quiet: true

matrix:

  # If some rows in the build matrix are allowed to fail, the build won’t be
  # marked as finished until they have completed. To mark the build as finished
  # as soon as possible, add fast_finish: true

#  fast_finish: true

  include:

#    - os: linux
#      dist: xenial
#      language: java
#      jdk:
#        - openjdk11
#
#    - os: osx
#      osx_image: xcode10.1
#      language: java
#      jdk:
#        - openjdk11

    - os: windows
      language: bash

# Travis CI uploads the cache after the script phase of the build,
# but before either after_success or after_failure.
# You can cache arbitrary directories, such as Gradle, Maven, Composer and
# npm cache directories, between builds.

cache:
  directories:
    - $HOME/.gradle/caches/
    - $HOME/.gradle/wrapper/

before_install:
  - chmod a+x ./gradlew
  - find .ci -type f -name *.sh -exec chmod a+x {} ';'

install:
  - .ci/install.sh

before_script:
  - source .travis.env

script:
  - java --version
  - ./gradlew clean check jacocoTestReport jpackage --info --stacktrace

# When using caches, it may be useful to run a command just before uploading
# the new cache archive. For example, the dependency management utility may
# write lock files into the directory you are caching and you do not want them
# to affect the cache.
# Failure to upload the cache does not mark the job as failed.

before_cache:
  - rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock
  - rm -fr $HOME/.gradle/caches/*/plugin-resolution/

after_success:
  - bash <(curl -s https://codecov.io/bash)

# after_failure:

# before_deploy:

# deploy:

# after_deploy:

after_script:
  - echo '=== ALL DONE ==='
