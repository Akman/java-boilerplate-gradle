/**
 * The MIT License (MIT)
 *
 * Copyright (C) 2019 Alexander Kapitman <akman.ru@gmail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

import groovy.json.JsonSlurper

task uploadReleaseAssets {
    doLast {
        def os = org.gradle.internal.os.OperatingSystem.current()
        if (os.isWindows()) {

            def json = new JsonSlurper()

            def TAG = 'latest'

            def tokenCmd = ['git', 'config', '--global', 'github.token']
            def tokenOutputStream = new StringBuffer()
            def tokenProcess = tokenCmd.execute()
            tokenProcess.waitForProcessOutput(tokenOutputStream, System.err)
            def TOKEN = tokenOutputStream.toString().trim()

            def repoCmd = ['git', 'config', '--get', 'remote.origin.url']
            def repoOutputStream = new StringBuffer()
            def repoProcess = repoCmd.execute()
            repoProcess.waitForProcessOutput(repoOutputStream, System.err)
            def (OWNER, REPO) = repoOutputStream.toString().trim()
                .replaceAll(/^.+\:/, '')
                .replaceAll(/\.git$/, '')
                .tokenize('/')

            def branchCmd = ['git', 'rev-parse', '--abbrev-ref', 'HEAD']
            def branchOutputStream = new StringBuffer()
            def branchProcess = branchCmd.execute()
            branchProcess.waitForProcessOutput(branchOutputStream, System.err)
            def BRANCH = branchOutputStream.toString().trim()

            def API_URL = 'https://api.github.com/repos'
            def UPLOADS_URL = 'https://uploads.github.com/repos'
            def TAG_URL = "$API_URL/$OWNER/$REPO/releases/tags/$TAG"
            if (TAG == 'latest') {
                TAG_URL = "$API_URL/$OWNER/$REPO/releases/latest"
            }

            println "Upload assets for release: $TAG"
            println "Owner: $OWNER"
            println "Repo: $REPO"
            println "Branch: $BRANCH"
 
            println 'Authorization begin ...'
            def authCmd = ['curl', '-s', '-H', "\"Authorization: token $TOKEN\"", "$API_URL/$OWNER/$REPO"]
            def authOutputStream = new StringBuffer()
            def authProcess = authCmd.execute()
            authProcess.waitForProcessOutput(authOutputStream, System.err)
            def authJson = json.parseText(authOutputStream.toString())
            if (authJson.name != REPO) {
                println 'Error: Authorization failed!'
                println authOutputStream.toString()
                throw new StopExecutionException('Error: Authorization failed!')
            } else {
                println 'OK'
            }

            println 'Get release ...'
            def releaseCmd = ['curl', '-s', '-H', "\"Authorization: token $TOKEN\"", TAG_URL]
            def releaseOutputStream = new StringBuffer()
            def releaseProcess = releaseCmd.execute()
            releaseProcess.waitForProcessOutput(releaseOutputStream, System.err)
            def releaseJson = json.parseText(releaseOutputStream.toString())
            def RELEASE_ID = releaseJson.id
            if (!RELEASE_ID) {
                println 'Error: Failed to get release!'
                println releaseOutputStream.toString()
                throw new StopExecutionException('Error: Failed to get release!')
            } else {
                println "Release ID: $RELEASE_ID"
            }

            def ASSET_URL_PREFIX = "$UPLOADS_URL/$OWNER/$REPO/releases/$RELEASE_ID/assets?name="
            jpackageInstallerOutputDir.eachFile {
                if (it.isFile()) {
                    println 'Uploading file: ' + it.getName()
                    def uploadCmd = ['curl', '-s',
                        '-H', "\"Authorization: token $TOKEN\"",
                        '-H', '"Content-Type: application/octet-stream"',
                        '--data-binary', "@$it", ASSET_URL_PREFIX + it.getName()
                    ]
                    def uploadOutputStream = new StringBuffer()
                    def uploadProcess = uploadCmd.execute()
                    uploadProcess.waitForProcessOutput(uploadOutputStream, System.err)
                    def uploadJson = json.parseText(uploadOutputStream.toString())
                    if (uploadJson.state != 'uploaded') {
                        println 'Error: Failed to upload file!'
                        println uploadOutputStream.toString()
                        throw new StopExecutionException('Error: Failed to upload file!')
                    } else {
                        println 'OK'
                    }
                }
            }

        }
    }
}
