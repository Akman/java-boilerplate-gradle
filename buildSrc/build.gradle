/*
  Gradle Build Boilerplate Project

  https://github.com/akman/java-boilerplate-gradle/buildSrc

  The MIT License (MIT)

  Copyright (C) 2019 - 2020 Alexander Kapitman <akman.ru@gmail.com>

  Permission is hereby granted, free of charge, to any person obtaining
  a copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  and/or sell copies of the Software, and to permit persons to whom
  the Software is furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included
  in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFINGEMENT. IN NO EVENT SHALL
  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  DEALINGS IN THE SOFTWARE.
*/

plugins {
  id 'groovy'

  // https://github.com/CodeNarc/CodeNarc
  id 'codenarc'

  // https://docs.gradle.org/current/userguide/jacoco_plugin.html
  id 'jacoco'

  // https://github.com/hierynomus/license-gradle-plugin
  id 'com.github.hierynomus.license' version '0.15.0'

  // https://github.com/ben-manes/gradle-versions-plugin
  id 'com.github.ben-manes.versions' version '0.27.0'
  
  // https://github.com/Akman/vscode-tasks
  id 'ru.akman.vscode-tasks' version '0.2.0'
}

repositories {
  jcenter()
}

ext {
  defaultEncoding = 'UTF-8'
}

java {
  sourceCompatibility = JavaVersion.VERSION_13
  targetCompatibility = JavaVersion.VERSION_13
}

dependencies {

  implementation(
    localGroovy(),
    gradleApi()
  )

  // Spock

  testImplementation(
    'org.spockframework:spock-core:1.3-groovy-2.5',
    // only necessary if Hamcrest matchers are used
    // 'org.hamcrest:hamcrest-core:1.3',
  )

  // testRuntimeOnly(
  //   // allows mocking of classes, in addition to interfaces
  //   'net.bytebuddy:byte-buddy:1.9.3',
  //   // allows mocking of classes without default constructor,
  //   // together with CGLIB
  //   'org.objenesis:objenesis:2.6',
  // )

  // JUnit 5

  // testImplementation(
  //   'org.junit.jupiter:junit-jupiter-api:5.4.2',
  //   'org.junit.jupiter:junit-jupiter-params:5.4.2',
  //   'org.mockito:mockito-junit-jupiter:2.28.2',
  // )

  // testRuntimeOnly(
  //   'org.junit.jupiter:junit-jupiter-engine:5.4.2',
  // )
}

[compileGroovy, compileTestGroovy]*.options*.encoding = defaultEncoding

license {
  // Specify location of header to use in comparisons,
  // default to project.file('LICENSE')
  header file("${projectDir}/config/license/LICENSE")
  // Skip over files that have some header already, which might not be
  // the one specified in the header parameter, defaults to false
  skipExistingHeaders false
  // Prevent tasks from stopping the build, defaults to false
  ignoreFailures true
  // Be extra strict in the formatting of existing headers, defaults to false
  strictCheck true
  headerDefinitions {
    javadoc_style {
      firstLine = '/*'
      beforeEachLine = '  '
      endLine = '*/'
      afterEachLine = ''
      // skipLinePattern = ''
      firstLineDetectionPattern = '(\\s|\\t)*/\\*.*$'
      lastLineDetectionPattern = '.*\\*/(\\s|\\t)*$'
      allowBlankLines = true
      isMultiline = true
      padLines = false
    }
    xml_style {
      firstLine = '<!--'
      beforeEachLine = '  '
      endLine = '-->'
      afterEachLine = ''
      skipLinePattern = '^<\\?xml.*>$'
      firstLineDetectionPattern = '(\\s|\\t)*<!--.*$'
      lastLineDetectionPattern = '.*-->(\\s|\\t)*$'
      allowBlankLines = true
      isMultiline = true
      padLines = false
    }
  }
  mapping([
    'groovy': 'JAVADOC_STYLE',
  ])
  includes([
    '**/*.groovy',
  ])
  excludes([
    '**/log4j*.xml',
    '**/*.properties',
    '**/*.png',
  ])
  ext {
    projectName = 'Gradle Build Boilerplate Project (buildSrc)'
    projectUrl = 'https://github.com/akman/java-boilerplate-gradle/buildSrc'
    inceptionYear = 2019
    currentYear = Calendar.getInstance().get(Calendar.YEAR)
    copyrightYear = "${inceptionYear}"
    if (inceptionYear != currentYear) {
      copyrightYear += " - ${currentYear}"
    }
    copyrightName = 'Alexander Kapitman'
    copyrightEmail = 'akman.ru@gmail.com'
  }
}

codenarc {
  // The version of the code quality tool to be used.
  toolVersion = '1.5'

  // The CodeNarc configuration file to use.
  // https://github.com/CodeNarc/CodeNarc/tree/master/src/main/resources/rulesets
  configFile = file("${projectDir}/config/codenarc/rules.groovy")

  // Whether to allow the build to continue if there are warnings.
  ignoreFailures = true

  // The maximum number of priority 1 violations allowed before failing the build.
  maxPriority1Violations = 0

  // The maximum number of priority 2 violations allowed before failing the build.
  maxPriority2Violations = 0

  // The maximum number of priority 3 violations allowed before failing the build.
  maxPriority3Violations = 0

  // The directory where reports will be generated.
  reportsDir = file("${project.reporting.baseDir}/codenarc")

  // The format type of the CodeNarc report. One of html, xml, text, console.
  reportFormat = 'html'
}

tasks.withType(Test) {
  testLogging {
    showExceptions = true
    showCauses = true
    showStackTraces = true
    displayGranularity = 2
    exceptionFormat = 'short'
    // showStandardStreams = true
    events(
      //'started',
      'passed',
      'skipped',
      'failed',
      org.gradle.api.tasks.testing.logging.TestLogEvent.STANDARD_ERROR,
      //org.gradle.api.tasks.testing.logging.TestLogEvent.STANDARD_OUT,
    )
    debug {
      displayGranularity = 0
      exceptionFormat = 'full'
      events(
        'started',
        'passed',
        'skipped',
        'failed',
      )
    }
  }
}

jacoco {
  toolVersion = '0.8.5'
  reportsDir = file("${project.reporting.baseDir}/jacoco")
}

jacocoTestReport {
  reports {
    xml.enabled true
    xml.destination file("${project.reporting.baseDir}/jacoco/report.xml")
    csv.enabled false
    html.destination file("${project.reporting.baseDir}/jacoco/html")
  }
}

build.dependsOn jacocoTestReport

defaultTasks 'build'
